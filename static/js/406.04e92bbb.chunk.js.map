{"version":3,"file":"static/js/406.04e92bbb.chunk.js","mappings":"+NAAaA,EAAe,CAC1BC,KAAM,GACNC,MAAO,GACPC,SAAU,I,oBCFZ,EAAwB,yBAAxB,EAAyD,yBAAzD,EAA0F,yB,UCmD1F,EA9CqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDD,SAAAA,EACAJ,aAAAA,IAFMM,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAKvBC,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,QAAU,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,QAAU,IAEnCT,EAAoBI,EAApBJ,MAAOC,EAAaG,EAAbH,SAEf,OACE,kBAAMC,SAAUI,EAAhB,WACE,gBAAKK,UAAWC,EAAhB,UACE,mBAAOC,QAASN,EAASI,UAAWC,EAApC,oBAEE,kBACED,UAAWC,EACXb,KAAK,QACLe,MAAOd,EACPe,SAAUV,EACVW,YAAY,cACZC,KAAK,QACLC,UAAQ,UAId,gBAAKP,UAAWC,EAAhB,UACE,mBAAOC,QAASH,EAAYC,UAAWC,EAAvC,uBAEE,kBACED,UAAWC,EACXb,KAAK,WACLe,MAAOb,EACPc,SAAUV,EACVW,YAAY,iBACZC,KAAK,WACLC,UAAQ,UAId,0C,oBCpBN,EArBkB,WAChB,IAAMC,GAAUC,EAAAA,EAAAA,KACVC,GAAWC,EAAAA,EAAAA,MAKjB,OAAIH,GACK,SAAC,KAAD,CAAUI,GAAG,eAIpB,2BACE,iBAAKZ,UAAWC,EAAAA,EAAAA,UAAhB,WACE,wCACA,SAACY,EAAD,CAAWtB,SAZD,SAAAuB,GACdJ,GAASK,EAAAA,EAAAA,IAAMD,c,+DCenB,IAvBgB,SAAC,GAAgD,IAA9CvB,EAA6C,EAA7CA,SAAUJ,EAAmC,EAAnCA,aAAmC,IAArB6B,QAAAA,OAAqB,SAC9D,GAA0BC,EAAAA,EAAAA,WAAS,UAAK9B,IAAxC,eAAOM,EAAP,KAAcyB,EAAd,KAmBA,MAAO,CAAEzB,MAAAA,EAAOyB,SAAAA,EAAUxB,aAjBL,SAAC,GAAgB,IAAdyB,EAAa,EAAbA,OACd/B,EAA+B+B,EAA/B/B,KAAMe,EAAyBgB,EAAzBhB,MAAOG,EAAkBa,EAAlBb,KAAMc,EAAYD,EAAZC,QACrBC,EAAoB,aAATf,EAAsBc,EAAUjB,EACjDe,GAAS,SAAAI,GAAS,yBACbA,GADa,cAEflC,EAAOiC,QAY4B1B,aARnB,SAAA4B,GACnBA,EAAEC,iBACFjC,GAAS,UAAKE,IACVuB,GACFE,GAAS,UAAK/B,Q,mBCjBpB,KAAgB,UAAY,8B,sDCArB,IAkBIW,EAAS,eAAC2B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["modules/LoginForm/initialState.js","webpack://react-homework-template/./src/modules/LoginForm/LoginForm.module.css?2400","modules/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","shared/hooks/useForm.js","webpack://react-homework-template/./src/pages/HomePage/HomePage.module.css?5baa","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"LoginForm_block__070JO\",\"label\":\"LoginForm_label__GG2Zq\",\"input\":\"LoginForm_input__VqjEs\"};","import useForm from '../../shared/hooks/useForm';\nimport { initialState } from './initialState';\nimport { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport styles from './LoginForm.module.css';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    onSubmit,\n    initialState,\n  });\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  const { email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={styles.block}>\n        <label htmlFor={emailId} className={styles.label}>\n          Email:\n          <input\n            className={styles.input}\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n            placeholder=\"Input email\"\n            type=\"email\"\n            required\n          />\n        </label>\n      </div>\n      <div className={styles.block}>\n        <label htmlFor={passwordId} className={styles.label}>\n          Password:\n          <input\n            className={styles.input}\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n            placeholder=\"Input password\"\n            type=\"password\"\n            required\n          />\n        </label>\n      </div>\n      <button>Login</button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { login } from '../../redux/auth/auth-operations';\nimport LoginForm from 'modules/LoginForm';\nimport useAuth from '../../shared/hooks/useAuth';\nimport styles from '../HomePage/HomePage.module.css';\nconst LoginPage = () => {\n  const isLogin = useAuth();\n  const dispatch = useDispatch();\n  const onLogin = data => {\n    dispatch(login(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return (\n    <main>\n      <div className={styles.container}>\n        <h2>Login Page</h2>\n        <LoginForm onSubmit={onLogin} />\n      </div>\n    </main>\n  );\n};\n\nexport default LoginPage;\n","import { useState } from 'react';\n\nconst useForm = ({ onSubmit, initialState, isReset = true }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ target }) => {\n    const { name, value, type, checked } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n    setState(prevState => ({\n      ...prevState,\n      [name]: newValue,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    if (isReset) {\n      setState({ ...initialState });\n    }\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"HomePage_container__uNu-e\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["initialState","name","email","password","onSubmit","useForm","state","handleChange","handleSubmit","emailId","useMemo","nanoid","passwordId","className","styles","htmlFor","value","onChange","placeholder","type","required","isLogin","useAuth","dispatch","useDispatch","to","LoginForm","data","login","isReset","useState","setState","target","checked","newValue","prevState","e","preventDefault","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}